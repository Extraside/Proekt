Блок1: модуль гит
1. Что такое система контроля версий?
1)Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии.

2. Что такое гит?
2)это система контроля версий, которая помогает отслеживать историю изменений в файлах. Git используют программисты для совместной работы над проектами.

3. Опишите отличительные особенности гита
3)Более ранняя система управления версиями работает, сохраняя все коммиты локально на жестком диске пользователя. Этот набор коммитов на локальном жестком диске 
пользователя известен как репозиторий. Но из-за этого пользователи не могут работать с командой, работающей над одной и той же кодовой базой.

4. Что такое репозиторий в рамках гит?
4)Репозиторий — это начальная точка для ведения проекта. В репозитории хранятся файлы проекта и производятся над ними нужные операции: создаются ветки для разных разработчиков и 
файлов, производится деление на версии, пишутся комментарии, осуществляется сборка конечного результата в готовый файл проекта.

5. Что такое БЛОБ?
5)используется чтобы хранить содержимое файла - обычно это просто файл.

6. Что такое Three?
6)Например, после клонирования репозитория мы по-умолчанию находимся в ветке master, создаём ветку test, затем делаем в ней какие-то изменения, 
делаем коммит, а потом переключиться обратно в ветку master.

7. Что такое ветка(Branch)?
7)фиксация изменений, взятых из индекса.

8. Что такое commit?
8)это операция, которая берет все подготовленные изменения и отправляет их в репозиторий как единое целое.

9. проиндексировать изменение - сохранить изменение в репозиторий - отправить изменение на удаленный сервер - получить изменения с удаленного сервера - сменить 
текущую рабочую ветку - откатить изменения (в виде кода)
9) проиндексировать изменение - git add, git status. сохранить изменение в репозиторий - git commit.  отправить изменение на удаленный сервер - git push.
получить изменения с удаленного сервера - git pull. сменить текущую рабочую ветку - git checkout. откатить изменения - git reset <file>.

10. Опишите известные вам сценарии ветвления
10)---

Блок2: docker
1. Что такое система виртуализации(глобально)?
1)Виртуализация — это предоставление набора вычислительных ресурсов или их логического объединения, абстрагированное от аппаратной реализации, и обеспечивающее при этом логическую 
изоляцию друг от друга вычислительных процессов, выполняемых на одном физическом ресурсе.Это механизм создания виртуального, программного, представления ресурсов без привязки к аппаратному обеспечению.
Виртуализировать можно серверы, средства хранения данных, сетевые ресурсы, приложения и рабочие столы. Примером использования виртуализации является возможность запуска нескольких операционных систем 
на одном компьютере: при том каждый из экземпляров таких гостевых операционных систем работает со своим набором логических ресурсов (процессорных, оперативной памяти, устройств хранения), 
предоставлением которых из общего пула, доступного на уровне оборудования, управляет хостовая операционная система — гипервизор. Также могут быть подвергнуты виртуализации сети передачи данных, 
сети хранения данных, платформенное и прикладное программное обеспечение.

2. Что такое система контейнеризации?
2)Контейнеризация — это технология, которая помогает запускать приложения изолированно от основной операционной системы. Программа упаковывается в специальную оболочку-контейнер, внутри 
которой — среда, необходимая для работы.

3. Перечислите основные различия между этими системами?
3)У Виртуализации
медленная загрузка;
возможная плата за предоставление дополнительного пространства;
не все виртуальные машины (VM) поддерживают совместимое использование;
поддерживающие VM часто требуют сложной настройки;
образ может быть слишком большим, так как «дополнительная ОС» добавляет гигабайт пространства в проект поверх операционной системы, а в большинстве случаев на сервер ставится несколько VM, 
которые занимают еще больше места.
В то время как у Контейнеризации
Ускоренный процесс разработки. Нет необходимости устанавливать вспомогательные инструменты вроде PostgreSQL, Redis, Elasticsearch: их можно запускать в контейнерах.
Удобная инкапсуляция приложений.
Понятный мониторинг.
Простое масштабирование.

4. Что такое система оркестрации?
4)Оркестрация контейнеров - это автоматизация и управление жизненным циклом контейнеров и услуг. Это процесс управления и организации архитектуры нескольких контейнеров и микросервисов в масштабе.

5. Приведите названия известных вам системы оркестрации?
5)Kubernetes. OpenShift Container Platform. Docker Swarm. Rancher.

6. Что такое том в рамках контейнеризации?
6)---

7. Что такое образ?
7)Docker-образ — шаблон для создания Docker-контейнеров. Представляет собой исполняемый пакет, содержащий все необходимое для запуска приложения: код, среду выполнения, библиотеки, переменные окружения и файлы конфигурации. 
Docker-образ состоит из слоев.

8. Что такое контейнер?
8)Контейнер Docker — это популярный легкий автономный выполняемый контейнер, который включает в себя все необходимое для запуска приложения, в том числе библиотеки, системные инструменты, код и среду выполнения. 

9. Приведите команды docker для операций: собрать образ - получить образ из удаленного репозитория - запустить контейнер - остановить контейнер - удалить контейнер - удалить образ - отправить образ в репозиторий 
- авторизоваться на удаленном репозитории
9)Собрать образ - mkdir -p /opt/docker/mynginx -> cd /opt/docker/mynginx -> vi Dockerfile. получить образ из удаленного репозитория - docker pull имя образа. 
запустить контейнер - docker run <image_name>. остановить контейнер - docker stop имя/id контейнера. удалить контейнер - docker rm имя/id контейнера. удалить образ - docker container rm имя/id контейнера.
отправить образ в репозиторий - docker push. авторизоваться на удаленном репозитории - docker login

10. Что такое docker compos?
10)Docker Compose — это инструментальное средство, входящее в состав Docker. Оно предназначено для решения задач, связанных с развёртыванием проектов. Изучая основы Docker, вы могли столкнуться с созданием 
простейших приложений, работающих автономно, не зависящих, например, от внешних источников данных или от неких сервисов.

11. Приведите команды для следующих действий: запустить сервисы - остановить сервисы - удалить сервисы - собрать образ
11)запустить сервисы - docker-compose run service. остановить сервисы - docker-compose stop имя/id сервиса. удалить сервисы - docker-compose rm имя/id сервиса.

Блок3: команда Linux
1. Перечислите команды, для командной строки линукс: сменить каталог - создать каталог - удалить каталог - удалить файл - создать файл - посмотреть список файлов в текущем каталоге
1)сменить каталог - cd. создать каталог - mkdir. удалить каталог/файл - rm. создать файл - cat. посмотреть список файлов в текущем каталоге - ls.

2. Перечислите известные вам текст. редакторы для строки линукс
2)Vim, GNU Emacs, Nano, ne.

3) Перечислите порядок действий для выхода из текст. редактора ви: (Нажимаем Esc - Нажимаем Enter - затем одновременно нажмите Shift и ; - ввести команду :q[uit])

Блок4:
1) Приведите пример корректного docker file
FROM python:3.7.2-alpine3.8
LABEL maintainer="jeffmshale@gmail.com"
ENV ADMIN="jeff"

RUN apk update && apk upgrade && apk add bash

COPY . ./app

ADD https://raw.githubusercontent.com/discdiver/pachy-vid/master/sample_vids/vid1.mp4 \
/my_app_directory

RUN ["mkdir", "/a_directory"]

CMD ["python", "./my_script.py"]

2)Приведите пример рабочего docker compos file
version: '3.4'

services:
  webmvc:
    image: eshop/webmvc
    environment:
      - CatalogUrl=http://catalog-api
      - OrderingUrl=http://ordering-api
      - BasketUrl=http://basket-api
    ports:
      - "5100:80"
    depends_on:
      - catalog-api
      - ordering-api
      - basket-api

  catalog-api:
    image: eshop/catalog-api
    environment:
      - ConnectionString=Server=sqldata;Initial Catalog=CatalogData;User Id=sa;Password=[PLACEHOLDER]
    expose:
      - "80"
    ports:
      - "5101:80"
    #extra hosts can be used for standalone SQL Server or services at the dev PC
    extra_hosts:
      - "CESARDLSURFBOOK:10.0.75.1"
    depends_on:
      - sqldata

  ordering-api:
    image: eshop/ordering-api
    environment:
      - ConnectionString=Server=sqldata;Database=Services.OrderingDb;User Id=sa;Password=[PLACEHOLDER]
    ports:
      - "5102:80"
    #extra hosts can be used for standalone SQL Server or services at the dev PC
    extra_hosts:
      - "CESARDLSURFBOOK:10.0.75.1"
    depends_on:
      - sqldata

  basket-api:
    image: eshop/basket-api
    environment:
      - ConnectionString=sqldata
    ports:
      - "5103:80"
    depends_on:
      - sqldata

  sqldata:
    environment:
      - SA_PASSWORD=[PLACEHOLDER]
      - ACCEPT_EULA=Y
    ports:
      - "5434:1433"

  basketdata:
    image: redis


3)Приведите пример файла в разметке mark down 
